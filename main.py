from multiprocessing import Pool
import os
import time
from datetime import datetime
from dotenv import load_dotenv
import mwclient
import schedule
from wikis_config import WIKIS
import sys

sys.stdout.reconfigure(encoding='utf-8')

# === N·∫°p bi·∫øn m√¥i tr∆∞·ªùng ===
load_dotenv()
USERNAME = os.getenv("WIKI_USER")
PASSWORD = os.getenv("WIKI_PASS")

if not USERNAME or not PASSWORD:
    raise RuntimeError("Thi·∫øu WIKI_USER ho·∫∑c WIKI_PASS.")

# === Ghi d·∫•u l·∫ßn ch·∫°y m·ªõi v√†o log.txt ===
with open("log.txt", "a", encoding="utf-8") as f:
    f.write("\n=== Ch·∫°y m·ªõi: {} ===\n".format(datetime.now().strftime("%Y-%m-%d %H:%M:%S")))

# === H√†m log chu·∫©n ===
def log(msg, wiki_desc=None): 
    timestamp = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
    prefix = f"[{wiki_desc}]" if wiki_desc else ""
    full_msg = f"{timestamp} {prefix} {msg}"

    print(full_msg)
    with open("log.txt", "a", encoding="utf-8") as f:
        f.write(full_msg + "\n")

# === H√†m c·∫≠p nh·∫≠t trang ===
def update_page(site, page_name, wiki_desc):
    try:
        page = site.pages[page_name]
        if not page.exists:
            log(f"[‚ö†] Trang kh√¥ng t·ªìn t·∫°i: {page_name}", wiki_desc)
            return

        log(f"[üü¢] T√¨m th·∫•y trang: {page_name}", wiki_desc)
        current_text = page.text()
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        new_ping = f"<!-- ping update {timestamp} -->"

        if "<!-- ping update" in current_text:
            start = current_text.find("<!-- ping update")
            end = current_text.find("-->", start)
            if end != -1:
                old_ping = current_text[start:end+3]
                new_text = current_text.replace(old_ping, new_ping, 1)
            else:
                new_text = current_text + "\n" + new_ping
        else:
            new_text = current_text + "\n" + new_ping

        page.save(new_text, summary="T·ª± ƒë·ªông c·∫≠p nh·∫≠t ƒë·ªÉ gi·ªØ wiki ho·∫°t ƒë·ªông")
        log(f"[‚úì] C·∫≠p nh·∫≠t th√†nh c√¥ng: {page_name}", wiki_desc)

    except mwclient.errors.ProtectedPageError:
        log(f"[üîí] Trang b·ªã kh√≥a: {page_name}", wiki_desc)
    except Exception as e:
        log(f"[X] L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}", wiki_desc)

# === H√†m x·ª≠ l√Ω t·ª´ng wiki ===
def process_wiki(wiki):
    desc = wiki["desc"]
    log(f"üåê B·∫Øt ƒë·∫ßu x·ª≠ l√Ω wiki: {desc}", desc)
    try:
        site = mwclient.Site(
            host=wiki['hostcheck'],
            path=wiki['path'],
            scheme="https"
        )
        site.login(USERNAME, PASSWORD)
    except Exception as e:
        log(f"[X] Kh√¥ng th·ªÉ k·∫øt n·ªëi ho·∫∑c ƒëƒÉng nh·∫≠p: {e}", desc)
        return

    for i, page in enumerate(wiki["pages"]):
        update_page(site, page, desc)
        if i < len(wiki["pages"]) - 1:
            time.sleep(20)
            log("‚è≥ T·∫°m d·ª´ng 20s...", desc)

    log(f"‚úÖ Ho√†n t·∫•t: {desc}", desc)

# === H√†m ch·∫°y to√†n b·ªô wiki ===
def update_all_pages():
    log("üîÑ B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t to√†n b·ªô wiki...")
    with Pool(processes=4) as pool:
        pool.map(process_wiki, WIKIS)

# === Ch·∫°y th·ª≠ 1 wiki ƒë·∫ßu ti√™n ===
def test_first_wiki():
    test_wiki = WIKIS[0]
    desc = test_wiki['desc']
    try:
        site = mwclient.Site(
            host=test_wiki['hostcheck'],
            path=test_wiki['path'],
            scheme="https"
        )
        site.login(USERNAME, PASSWORD)
        log(f"[‚úî] ƒêƒÉng nh·∫≠p th√†nh c√¥ng v√†o wiki th·ª≠: {desc}")
    except Exception as e:
        log(f"[X] Th·ª≠ k·∫øt n·ªëi th·∫•t b·∫°i: {e}")
        exit(1)

# === Ch·∫°y ch√≠nh ===
if __name__ == "__main__":
    start_time = time.time()

    test_first_wiki()  # ki·ªÉm tra wiki ƒë·∫ßu ti√™n

    # G·ªçi l·∫ßn ƒë·∫ßu ti√™n ngay khi kh·ªüi ch·∫°y
    update_all_pages()

    # L√™n l·ªãch ch·∫°y m·ªói 10 ph√∫t
    schedule.every(10).minutes.do(update_all_pages)
    print("ü§ñ Bot ƒëang ch·∫°y th·ª≠ nghi·ªám, s·∫Ω c·∫≠p nh·∫≠t m·ªói 10 ph√∫t...")

    try:
        # V√≤ng l·∫∑p ch·ªù
        while True:
            schedule.run_pending()
            time.sleep(1)
    except KeyboardInterrupt:
        print("üõë Bot ƒë√£ d·ª´ng b·ªüi ng∆∞·ªùi d√πng.")

    end_time = time.time()
    total_minutes = round((end_time - start_time) / 60, 2)
    log(f"üèÅ T·∫•t c·∫£ ƒë√£ x·ª≠ l√Ω xong. Th·ªùi gian: {total_minutes} ph√∫t.")

# === K·∫øt th√∫c ch∆∞∆°ng tr√¨nh ===
# Ch∆∞∆°ng tr√¨nh ƒë√£ ho√†n th√†nh c·∫≠p nh·∫≠t c√°c wiki v√† ghi log ƒë·∫ßy ƒë·ªß.